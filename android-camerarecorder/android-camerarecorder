#!/usr/bin/env bash
#
# SPDX-License-Identifier: AGPL-3.0

_bin="$( \
  dirname \
    "$( \
      command \
        -v \
	  "env")")"
_lib="${_bin}/../lib"
_share="${_bin}/../share"
source \
  "${_lib}/libcrash-bash/crash-bash"

# Check all required programs
# are available
_requirements() {
  _check_cmd \
    'android-recorder' \
    'android-recorder'
  _check_cmd \
    'camera-mode' \
    'record-tools'
}

# shellcheck disable=SC2034
_global_variables() {
  recording_date=""
  recording_resolution=""
  camera_app=""
  recorder_app=""
  recording_length=""
  out_file=""
  bit_rate=""
  color=""
  quiet=""
}

_method_auto_detect() {
  if [[ "$(uname -o)" == "Android" ]]; then
    echo \
      'android'
  fi
}

_camera_mode_options(){
  _camera+=(
    camera-mode
  )
  _camera_app_opts+=(
    -a
      "${_camera_app}"
    -t
      "${_length}"
    service
  )
}

_android-recorder_options(){
  _recorder+=(
    android-recorder
  )
  _recorder_opts+=(
    -l
      "${_length}" 
    -b
      "${_rate}"
  )
}

# Record screen
# $1: input video file
# $2: recording method (root)
# $2: delay seconds
# $3: output video file
_android_camerarecorder() {
  local \
    _camera_app="${1}" \
    _recorder_app="${2}" \
    _resolution="${3}" \
    _rate="${4}" \
    _length="${5}" \
    _out="${6}" \
    _camera=() \
    _camera_app_opts=() \
    _recorder_opts=() \
    _recorder=() \
    _pids=()
  if [[ "${quiet}" != "y" ]]; then
    _recorder_opts+=(
      -v
    )
    _camera_app_opts+=(
      -v
    )
  fi
  "_camera_mode_options"
  "_${_recorder_app}_options"
  _run \
    "record" \
    "0" \
    "async" \
    "${_recorder[@]}" \
      "${_recorder_opts[@]}" \
      "${_out}" || \
    true
  "${_camera[@]}" \
      "${_camera_app_opts[@]}" || \
    true
  _pids=(
    "$(_get_pid \
         "record")"
  )
  wait \
    "${_pids[@]}" || \
    true
  _msg_info \
    "recording ended, quitting."
}

_resolution_auto_detect() {
  local \
    _resolution
  if [[ $(command -v 'sudo') != "" ]]; then
    _resolution="$( \
      sudo \
        wm \
          size | \
        tail \
          -n \
          1 | \
	  awk \
	    '{print $3}')"
  else
    _resolution='720x1280'
  fi
  echo \
    "${_resolution}"
}

_camera_app_auto_detect() {
  local \
    _os
  _os="$( \
    uname \
      -o)"
  if [[ "${_os}" == 'Android' ]]; then
    echo \
      'net.sourceforge.opencamera'
  fi
}

# Set defaults and, if present, overrides
# from program command line option parameters
_set_overrides() {
  _set_override \
    "recording" \
    "date" \
    "$(_get_date_human)"
  _set_override \
    "camera" \
    "app" \
    "$(_camera_app_auto_detect)"
  _set_override \
    "recorder" \
    "app" \
    "android-recorder"
  _set_override \
    "recording" \
    "resolution" \
    "$(_resolution_auto_detect)" 
  _set_override \
    "bit" \
    "rate" \
    "420000" # 420 Kb?
    # "16000000" # 16 Mb?
  _set_override \
    "recording" \
    "length" \
    "360" # "$(( 24 * 60 * 60 ))" # 24 hours
  if [[ -v override_color ]]; then
    color="${override_color}"
  elif [[ -z "${color}" ]]; then
    color="n"
  fi
  if [[ -v override_quiet ]]; then
    quiet="${override_quiet}"
  elif [[ -z "${quiet}" ]]; then
    quiet="y"
  fi
}

# Shows configuration options.
_show_config() {
  _msg_info "${app_name} configuration"
  _msg_info "           Recording date:   $(_get "recording" "date")"
  _msg_info "               Camera app:   $(_get "camera" "app")"
  _msg_info "             Recorder app:   $(_get "recorder" "app")"
  _msg_info "                 Bit rate:   $(_get "bit" "rate")"
  _msg_info "     Recording resolution:   $(_get "recording" "resolution")"
  _msg_info "         Recording length:   $(_get "recording" "length")"
  _msg_info "              Output file:   $(_get "out" "file")"
}

# Show help usage, with an exit status.
# $1: exit status number.
_usage() {
  local \
    _usage_text
  IFS='' \
    read \
      -r \
      -d '' \
      _usage_text << \
        ENDUSAGETEXT || true

Android camera recorder.

Usage:
  $(_get "app" "name")
    [options]
    (<out_file>)
  options:
     -p <camera_app>      Android camera app to launch.
                          Default: $(_get "camera" "app")
     -r <recorder_app>    Recorder application to use.
                          Default: $(_get "recorder" "app")
     -s <widthxheight>    Recording resolution.
                          Default: $(_get "recording" "resolution")
     -b <bitrate>         Video bitrate.
                          Default: $(_get "bit" "rate").
     -l <length>          Length of the recording.
                          Default: $(_get "recording" "length").
     -h                   This message.
     -v                   Enable verbose output
ENDUSAGETEXT
  _printf \
    '%s\n' \
    "${_usage_text}"
  exit \
    "${1}"
}

_globals
_global_variables
_requirements
# shellcheck disable=SC2004
# shellcheck disable=SC2034
while \
  getopts \
    'p:r:b:l:cvh?' \
    arg; do
  case \
    "${arg}" in
    p) override_camera_app="${OPTARG}" ;;
    r) override_recorder_app="${OPTARG}" ;;
    b) override_bit_rate="${OPTARG}" ;;
    l) override_recording_length="${OPTARG}" ;;
    c) override_color="y" ;;
    v) override_quiet="n" ;;
    h|?) _set_overrides && \
	 _usage \
           0 ;;
    *)
    _msg_error \
      "Invalid argument '${arg}'" \
      0 && \
    _set_overrides && \
    _usage \
      1
    ;;
  esac
done
shift \
  $(( \
    OPTIND - 1 \
  ))
(( $# < 1 )) && \
  _set_overrides && \
  _usage \
    1
out_file="${1}"
_set_overrides
_config_user_init \
  "$(_get "app" "name")"
_show_config
app_opts=(
  "${camera_app}"
  "${recorder_app}"
  "${recording_resolution}"
  "${bit_rate}"
  "${recording_length}"
  "${out_file}"
)
_android_camerarecorder \
  "${app_opts[@]}"
